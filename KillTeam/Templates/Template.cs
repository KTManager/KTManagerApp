#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KillTeam.Templates
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "Template.cshtml"
using KillTeam.Models;

#line default
#line hidden

#line 2 "Template.cshtml"
using KillTeam.Views;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Template : TemplateBase
{

#line hidden

#line 4 "Template.cshtml"
public GeneratedList Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("\n");


#line 6 "Template.cshtml"
   var odd = true; 

#line default
#line hidden
WriteLiteral("\n\n<!DOCTYPE html>\n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">\n<head>\n    <meta");

WriteLiteral(" charset=\"UTF-8\"");

WriteLiteral(">\n    <title>Kill Team ");


#line 12 "Template.cshtml"
                Write(Model.Name);


#line default
#line hidden
WriteLiteral(" - Kill Team ");


#line 12 "Template.cshtml"
                                        Write(Model.Faction);


#line default
#line hidden
WriteLiteral("</title>\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(" href=\"KTMList.css\"");

WriteLiteral(" media=\"screen, print\"");

WriteLiteral(" />\n</head>\n<body>\n<div");

WriteLiteral(" class=\"page\"");

WriteLiteral(">\n    <div");

WriteLiteral(" class=\"header\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"header__value\"");

WriteLiteral(" id=\"header__faction\"");

WriteLiteral(">");


#line 18 "Template.cshtml"
                                                   Write(Model.Faction);


#line default
#line hidden
WriteLiteral("</div>\n        <div");

WriteLiteral(" class=\"header__value\"");

WriteLiteral(" id=\"header__name\"");

WriteLiteral(">");


#line 19 "Template.cshtml"
                                                Write(Model.Name);


#line default
#line hidden
WriteLiteral("</div>\n        <div");

WriteLiteral(" class=\"header__value\"");

WriteLiteral(" id=\"header__points\"");

WriteLiteral(">");


#line 20 "Template.cshtml"
                                                  Write(Model.Points);


#line default
#line hidden
WriteLiteral(" pts</div>\n    </div>\n");


#line 22 "Template.cshtml"
    

#line default
#line hidden

#line 22 "Template.cshtml"
     if (Model.ShowTactics)
    {


#line default
#line hidden
WriteLiteral("        <div");

WriteLiteral(" id=\"tactics\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"tactics__title\"");

WriteLiteral(">\n");

WriteLiteral("                ");


#line 26 "Template.cshtml"
           Write(KillTeam.Properties.Resources.Tactiques);


#line default
#line hidden
WriteLiteral("\n            </div>\n");


#line 28 "Template.cshtml"
            

#line default
#line hidden

#line 28 "Template.cshtml"
             foreach (var vm in Model.Tactics)
            {


#line default
#line hidden
WriteLiteral("                <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "tactics__row", true)

#line 30 "Template.cshtml"
  , Tuple.Create<string,object,bool> (" ", odd ? "tactics__odd" : "even-row"

#line default
#line hidden
, false)
);
WriteLiteral(">\n                    <strong>");


#line 31 "Template.cshtml"
                        Write($"{vm.Tactique.Name} ({vm.Origine}: {vm.Tactique.Cost}{KillTeam.Properties.Resources.Points})");


#line default
#line hidden
WriteLiteral(":</strong> ");


#line 31 "Template.cshtml"
                                                                                                                                   Write(vm.Tactique.Description);


#line default
#line hidden
WriteLiteral("\n                </div>\n");


#line 33 "Template.cshtml"
                odd = !odd;
            }


#line default
#line hidden
WriteLiteral("        </div>\n");

WriteLiteral("        <div");

WriteLiteral(" class=\"spacer\"");

WriteLiteral("></div>\n");


#line 37 "Template.cshtml"
    }


#line default
#line hidden
WriteLiteral("    <div");

WriteLiteral(" id=\"common\"");

WriteLiteral(">\n        <div");

WriteLiteral(" id=\"common__title\"");

WriteLiteral(">\n");

WriteLiteral("            ");


#line 40 "Template.cshtml"
       Write(KillTeam.Properties.Resources.AptitudesCommunes);


#line default
#line hidden
WriteLiteral("\n        </div>\n");


#line 42 "Template.cshtml"
        

#line default
#line hidden

#line 42 "Template.cshtml"
           odd = true; 

#line default
#line hidden
WriteLiteral("\n");


#line 43 "Template.cshtml"
        

#line default
#line hidden

#line 43 "Template.cshtml"
         foreach (var ability in Model.Abilities)
        {


#line default
#line hidden
WriteLiteral("            <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "common__row", true)

#line 45 "Template.cshtml"
, Tuple.Create<string,object,bool> (" ", odd ? "common__odd" : "even-row"

#line default
#line hidden
, false)
);
WriteLiteral(">\n                <strong>");


#line 46 "Template.cshtml"
                   Write(ability.Name);


#line default
#line hidden
WriteLiteral(":</strong> ");


#line 46 "Template.cshtml"
                                           Write(ability.Description);


#line default
#line hidden
WriteLiteral("  \n            </div>\n");


#line 48 "Template.cshtml"
            odd = !odd;
        }


#line default
#line hidden
WriteLiteral("    </div>\n    <div");

WriteLiteral(" class=\"spacer\"");

WriteLiteral("></div>\n    <div");

WriteLiteral(" id=\"members\"");

WriteLiteral(">\n");


#line 53 "Template.cshtml"
        

#line default
#line hidden

#line 53 "Template.cshtml"
           odd = true; 

#line default
#line hidden
WriteLiteral("\n");


#line 54 "Template.cshtml"
        

#line default
#line hidden

#line 54 "Template.cshtml"
         foreach (var member in Model.Members)
        {


#line default
#line hidden
WriteLiteral("            <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "member", true)

#line 56 "Template.cshtml"
, Tuple.Create<string,object,bool> (" ", odd ? "member__odd" : "even-row"

#line default
#line hidden
, false)
);
WriteLiteral(">\n                <div");

WriteLiteral(" class=\"member__header\"");

WriteLiteral(">\n                    <div");

WriteLiteral(" class=\"member__stat member__type\"");

WriteLiteral(">");


#line 58 "Template.cshtml"
                                                      Write(member.SpecialistLevel);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__points\"");

WriteLiteral(">");


#line 59 "Template.cshtml"
                                                        Write(member.Cost);


#line default
#line hidden
WriteLiteral(" ");


#line 59 "Template.cshtml"
                                                                     Write(KillTeam.Properties.Resources.Points);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__m\"");

WriteLiteral(">");


#line 60 "Template.cshtml"
                                                   Write(KillTeam.Properties.Resources.M);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__ws\"");

WriteLiteral(">");


#line 61 "Template.cshtml"
                                                    Write(KillTeam.Properties.Resources.CC);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__bs\"");

WriteLiteral(">");


#line 62 "Template.cshtml"
                                                    Write(KillTeam.Properties.Resources.CT);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__s\"");

WriteLiteral(">");


#line 63 "Template.cshtml"
                                                   Write(KillTeam.Properties.Resources.F);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__t\"");

WriteLiteral(">");


#line 64 "Template.cshtml"
                                                   Write(KillTeam.Properties.Resources.E);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__w\"");

WriteLiteral(">");


#line 65 "Template.cshtml"
                                                   Write(KillTeam.Properties.Resources.PV);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__a\"");

WriteLiteral(">");


#line 66 "Template.cshtml"
                                                   Write(KillTeam.Properties.Resources.A);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__ld\"");

WriteLiteral(">");


#line 67 "Template.cshtml"
                                                    Write(KillTeam.Properties.Resources.Cd);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__sv\"");

WriteLiteral(">");


#line 68 "Template.cshtml"
                                                    Write(KillTeam.Properties.Resources.Sv);


#line default
#line hidden
WriteLiteral("</div>\n                </div>\n                <div");

WriteLiteral(" class=\"member__stats\"");

WriteLiteral(">\n                    <div");

WriteLiteral(" class=\"member__stat member__type\"");

WriteLiteral(">");


#line 71 "Template.cshtml"
                                                      Write(member.Name);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__m\"");

WriteLiteral(">");


#line 72 "Template.cshtml"
                                                   Write(member.ModelProfile.Movement);


#line default
#line hidden
WriteLiteral("\"</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__ws\"");

WriteLiteral(">");


#line 73 "Template.cshtml"
                                                    Write(member.ModelProfile.WeaponSkill);


#line default
#line hidden
WriteLiteral("+</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__bs\"");

WriteLiteral(">");


#line 74 "Template.cshtml"
                                                    Write(member.ModelProfile.BallisticSkill);


#line default
#line hidden
WriteLiteral("+</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__s\"");

WriteLiteral(">");


#line 75 "Template.cshtml"
                                                   Write(member.ModelProfile.Strength);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__t\"");

WriteLiteral(">");


#line 76 "Template.cshtml"
                                                   Write(member.ModelProfile.Toughness);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__w\"");

WriteLiteral(">");


#line 77 "Template.cshtml"
                                                   Write(member.ModelProfile.Wounds);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__a\"");

WriteLiteral(">");


#line 78 "Template.cshtml"
                                                   Write(member.ModelProfile.Attacks);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__ld\"");

WriteLiteral(">");


#line 79 "Template.cshtml"
                                                    Write(member.ModelProfile.Leadership);


#line default
#line hidden
WriteLiteral("</div>\n                    <div");

WriteLiteral(" class=\"member__stat member__sv\"");

WriteLiteral(">");


#line 80 "Template.cshtml"
                                                    Write(member.ModelProfile.Save);


#line default
#line hidden
WriteLiteral("+</div>\n                </div>\n                <table");

WriteLiteral(" class=\"member__weapons\"");

WriteLiteral(">\n                    <thead>\n                    <tr>\n                        <t" +
"h");

WriteLiteral(" class=\"weapon__stat weapon__w\"");

WriteLiteral(">Weapon</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__r\"");

WriteLiteral(">Range</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__t\"");

WriteLiteral(">Type</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__s\"");

WriteLiteral(">Strength</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__ap\"");

WriteLiteral(">AP</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__d\"");

WriteLiteral(">Damage</th>\n                        <th");

WriteLiteral(" class=\"weapon__stat weapon__a\"");

WriteLiteral(">Abilites</th>\n                    </tr>\n                    </thead>\n           " +
"         <tbody>\n");


#line 95 "Template.cshtml"
                    

#line default
#line hidden

#line 95 "Template.cshtml"
                      
                        var memberWeapons = member.MemberWeapons.ToList();
                        memberWeapons.Sort();
                    

#line default
#line hidden
WriteLiteral("\n                    \n");


#line 100 "Template.cshtml"
                    

#line default
#line hidden

#line 100 "Template.cshtml"
                     foreach (var weapon in memberWeapons.Select(mw => mw.Weapon))
                    {
                        if (weapon.IsEquipement())
                        {
                            continue;
                        }

                        if (weapon.IsMultiWeapons())
                        {


#line default
#line hidden
WriteLiteral("                            <tr>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__w\"");

WriteLiteral(">");


#line 110 "Template.cshtml"
                                                              Write(weapon.Name);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__a--multi\"");

WriteLiteral(">");


#line 111 "Template.cshtml"
                                                                      Write(weapon.Description ?? string.Empty);


#line default
#line hidden
WriteLiteral("</td>\n                            </tr>\n");


#line 113 "Template.cshtml"
                        }

                        foreach (var profile in weapon.WeaponProfiles)
                        {
                            var name = weapon.IsMultiWeapons() ? $" -{profile.Name}" : profile.Name;
                            var range = profile.Range > 0 ? $"{profile.Range}\"" : string.Empty;
                            var type = $"{profile.WeaponType.Name} {(profile.WeaponType.Id != "M" ? profile.ShotNumber : "")}";
                            


#line default
#line hidden
WriteLiteral("                            <tr>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__w\"");

WriteLiteral(">");


#line 122 "Template.cshtml"
                                                              Write(name);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__r\"");

WriteLiteral(">");


#line 123 "Template.cshtml"
                                                              Write(range);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__t\"");

WriteLiteral(">");


#line 124 "Template.cshtml"
                                                              Write(type);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__s\"");

WriteLiteral(">");


#line 125 "Template.cshtml"
                                                              Write(profile.Strength);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__ap\"");

WriteLiteral(">");


#line 126 "Template.cshtml"
                                                               Write(profile.ArmourPenetration);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__d\"");

WriteLiteral(">");


#line 127 "Template.cshtml"
                                                              Write(profile.Damages);


#line default
#line hidden
WriteLiteral("</td>\n                                <td");

WriteLiteral(" class=\"weapon__stat weapon__a\"");

WriteLiteral(">");


#line 128 "Template.cshtml"
                                                               Write(profile.Description ?? string.Empty);


#line default
#line hidden
WriteLiteral("</td>\n                            </tr>   \n");


#line 130 "Template.cshtml"
                        }
                    }


#line default
#line hidden
WriteLiteral("                    </tbody>\n                </table>\n");


#line 134 "Template.cshtml"
                

#line default
#line hidden

#line 134 "Template.cshtml"
                   var abilityOdd = false; 

#line default
#line hidden
WriteLiteral("\n");


#line 135 "Template.cshtml"
                

#line default
#line hidden

#line 135 "Template.cshtml"
                 if (member.IsPsyker)
                {
                    var psychics = member.MemberPsychics.Select(p => p.Psychic).ToList();
                    if (!member.MemberPsychics.Any())
                    {
                        psychics.Add(Model.Psybolt);
                    }



#line default
#line hidden
WriteLiteral("                    <div");

WriteLiteral(" class=\"psyker\"");

WriteLiteral(">\n                        <div");

WriteLiteral(" class=\"psyker__description\"");

WriteLiteral(">\n                            <strong>");


#line 145 "Template.cshtml"
                                Write(KillTeam.Properties.Resources.Psyker);


#line default
#line hidden
WriteLiteral(":</strong> ");


#line 145 "Template.cshtml"
                                                                                 Write(member.PsykerDesc);


#line default
#line hidden
WriteLiteral("\n                        </div>\n                        \n");


#line 148 "Template.cshtml"
                        

#line default
#line hidden

#line 148 "Template.cshtml"
                         if(Model.ShowAbilityDetails)
                        {
                            foreach (var power in psychics)
                            {


#line default
#line hidden
WriteLiteral("                                <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "psyker__power", true)

#line 152 "Template.cshtml"
                   , Tuple.Create<string,object,bool> (" ", abilityOdd ? "psyker__odd" : "even-row"

#line default
#line hidden
, false)
);
WriteLiteral(">\n                                    <strong>- ");


#line 153 "Template.cshtml"
                                         Write(power.Name);


#line default
#line hidden
WriteLiteral(" (");


#line 153 "Template.cshtml"
                                                      Write(power.WarpCharge);


#line default
#line hidden
WriteLiteral("):</strong> ");


#line 153 "Template.cshtml"
                                                                                   Write(power.Description);


#line default
#line hidden
WriteLiteral("\n                                </div>\n");


#line 155 "Template.cshtml"

                                abilityOdd = !abilityOdd;
                            }
                        }
                        else
                        {


#line default
#line hidden
WriteLiteral("                            <div");

WriteLiteral(" class=\"psyker__power even-row\"");

WriteLiteral(">\n                                - ");


#line 162 "Template.cshtml"
                             Write(KillTeam.Properties.Resources.Psyker);


#line default
#line hidden
WriteLiteral(": ");


#line 162 "Template.cshtml"
                                                                     Write(string.Join(", ", psychics.Select(p => p.Name)));


#line default
#line hidden
WriteLiteral("\n                            </div>\n");


#line 164 "Template.cshtml"
                        }


#line default
#line hidden
WriteLiteral("                    </div>\n");


#line 166 "Template.cshtml"
                }


#line default
#line hidden
WriteLiteral("                <div");

WriteLiteral(" class=\"abilities\"");

WriteLiteral(">\n");


#line 168 "Template.cshtml"
                    

#line default
#line hidden

#line 168 "Template.cshtml"
                       var abilities = member.Abilities.Where(a => Model.FactionAbilities.All(fa => fa.Id != a.Id)).ToList(); 

#line default
#line hidden
WriteLiteral("\n");


#line 169 "Template.cshtml"
                    

#line default
#line hidden

#line 169 "Template.cshtml"
                     if (Model.ShowAbilityDetails && !Model.GroupAbilities)
                    {
                        foreach (var ability in abilities)
                        {


#line default
#line hidden
WriteLiteral("                            <div");

WriteAttribute ("class", " class=\"", "\""
, Tuple.Create<string,object,bool> ("", "ability", true)

#line 173 "Template.cshtml"
         , Tuple.Create<string,object,bool> (" ", abilityOdd ? "ability--odd" : "even-row"

#line default
#line hidden
, false)
);
WriteLiteral(">\n");

WriteLiteral("                                ");


#line 174 "Template.cshtml"
                           Write(ability.Name);


#line default
#line hidden
WriteLiteral(": ");


#line 174 "Template.cshtml"
                                          Write(ability.Description);


#line default
#line hidden
WriteLiteral("\n                            </div>\n");


#line 176 "Template.cshtml"
                        }    
                    }
                    else if (abilities.Any())
                    {


#line default
#line hidden
WriteLiteral("                        <div");

WriteLiteral(" class=\"ability ability--odd\"");

WriteLiteral(">\n");

WriteLiteral("                            ");


#line 181 "Template.cshtml"
                       Write(KillTeam.Properties.Resources.Aptitudes);


#line default
#line hidden
WriteLiteral(": ");


#line 181 "Template.cshtml"
                                                                  Write(string.Join(", ", abilities.Select(a => a.Name)));


#line default
#line hidden
WriteLiteral("\n                        </div>\n");


#line 183 "Template.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                </div>\n            </div>\n");


#line 186 "Template.cshtml"
            odd = !odd;
        }


#line default
#line hidden
WriteLiteral("        <div");

WriteLiteral(" class=\"spacer\"");

WriteLiteral("></div>\n    </div>\n</div>\n</body>\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class TemplateBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
